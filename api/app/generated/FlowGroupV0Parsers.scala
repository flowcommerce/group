/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.1
 * apidoc:0.11.6 http://www.apidoc.me/flow/group/0.0.1/anorm_2_x_parsers
 */
import anorm._

package io.flow.group.v0.anorm.parsers {

  import io.flow.group.v0.anorm.conversions.Json._

  object Group {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      name = s"$prefix${sep}name"
    )

    def parser(
      id: String = "id",
      name: String = "name"
    ): RowParser[io.flow.group.v0.models.Group] = {
      SqlParser.str(id) ~
      SqlParser.str(name) map {
        case id ~ name => {
          io.flow.group.v0.models.Group(
            id = id,
            name = name
          )
        }
      }
    }

  }

  object GroupVersion {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      timestamp = s"$prefix${sep}timestamp",
      `type` = s"$prefix${sep}type",
      groupPrefix = s"$prefix${sep}group"
    )

    def parser(
      id: String = "id",
      timestamp: String = "timestamp",
      `type`: String = "type",
      groupPrefix: String = "group"
    ): RowParser[io.flow.group.v0.models.GroupVersion] = {
      SqlParser.str(id) ~
      SqlParser.get[_root_.org.joda.time.DateTime](timestamp) ~
      io.flow.common.v0.anorm.parsers.ChangeType.parser(`type`) ~
      io.flow.group.v0.anorm.parsers.Group.parserWithPrefix(groupPrefix) map {
        case id ~ timestamp ~ typeInstance ~ group => {
          io.flow.group.v0.models.GroupVersion(
            id = id,
            timestamp = timestamp,
            `type` = typeInstance,
            group = group
          )
        }
      }
    }

  }

  object Membership {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      groupPrefix = s"$prefix${sep}group",
      userPrefix = s"$prefix${sep}user"
    )

    def parser(
      id: String = "id",
      groupPrefix: String = "group",
      userPrefix: String = "user"
    ): RowParser[io.flow.group.v0.models.Membership] = {
      SqlParser.str(id) ~
      io.flow.group.v0.anorm.parsers.Group.parserWithPrefix(groupPrefix) ~
      io.flow.group.v0.anorm.parsers.ExpandableUser.parserWithPrefix(userPrefix) map {
        case id ~ group ~ user => {
          io.flow.group.v0.models.Membership(
            id = id,
            group = group,
            user = user
          )
        }
      }
    }

  }

  object MembershipVersion {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      timestamp = s"$prefix${sep}timestamp",
      `type` = s"$prefix${sep}type",
      membershipPrefix = s"$prefix${sep}membership"
    )

    def parser(
      id: String = "id",
      timestamp: String = "timestamp",
      `type`: String = "type",
      membershipPrefix: String = "membership"
    ): RowParser[io.flow.group.v0.models.MembershipVersion] = {
      SqlParser.str(id) ~
      SqlParser.get[_root_.org.joda.time.DateTime](timestamp) ~
      io.flow.common.v0.anorm.parsers.ChangeType.parser(`type`) ~
      io.flow.group.v0.anorm.parsers.Membership.parserWithPrefix(membershipPrefix) map {
        case id ~ timestamp ~ typeInstance ~ membership => {
          io.flow.group.v0.models.MembershipVersion(
            id = id,
            timestamp = timestamp,
            `type` = typeInstance,
            membership = membership
          )
        }
      }
    }

  }

  object User {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      email = s"$prefix${sep}email",
      namePrefix = s"$prefix${sep}name"
    )

    def parser(
      id: String = "id",
      email: String = "email",
      namePrefix: String = "name"
    ): RowParser[io.flow.group.v0.models.User] = {
      SqlParser.str(id) ~
      SqlParser.str(email).? ~
      io.flow.common.v0.anorm.parsers.Name.parserWithPrefix(namePrefix) map {
        case id ~ email ~ name => {
          io.flow.group.v0.models.User(
            id = id,
            email = email,
            name = name
          )
        }
      }
    }

  }

  object UserReference {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id"
    )

    def parser(
      id: String = "id"
    ): RowParser[io.flow.group.v0.models.UserReference] = {
      SqlParser.str(id) map {
        case id => {
          io.flow.group.v0.models.UserReference(
            id = id
          )
        }
      }
    }

  }

  object ExpandableUser {

    def parserWithPrefix(prefix: String, sep: String = "_") = {
      io.flow.group.v0.anorm.parsers.UserReference.parserWithPrefix(prefix, sep) |
      io.flow.group.v0.anorm.parsers.User.parserWithPrefix(prefix, sep)
    }

    def parser() = {
      io.flow.group.v0.anorm.parsers.UserReference.parser() |
      io.flow.group.v0.anorm.parsers.User.parser()
    }

  }

}