/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.7
 * apidoc:0.11.1 http://www.apidoc.me/flow/group/0.0.7/anorm_2_x_parsers
 */
import anorm._

package io.flow.group.v0.anorm.parsers {

  import io.flow.group.v0.anorm.conversions.Json._
  import io.flow.group.v0.anorm.conversions.Json.Local._
  import io.flow.common.v0.anorm.conversions.Json.Local._

  object Group {

    case class Mappings(
      id: String = "id",
      name: String = "name"
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        id = s"${prefix}${sep}id",
        name = s"${prefix}${sep}name"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.group.v0.models.Group] = {
      SqlParser.str(mappings.id) ~
      SqlParser.str(mappings.name) map {
        case id ~ name => {
          io.flow.group.v0.models.Group(
            id = id,
            name = name
          )
        }
      }
    }

  }

  object GroupVersion {

    case class Mappings(
      id: String = "id",
      timestamp: String = "timestamp",
      `type`: String = "type",
      group: io.flow.group.v0.anorm.parsers.Group.Mappings
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        id = s"${prefix}${sep}id",
        timestamp = s"${prefix}${sep}timestamp",
        `type` = s"${prefix}${sep}type",
        group = io.flow.group.v0.anorm.parsers.Group.Mappings.prefix(Seq(prefix, "group").filter(!_.isEmpty).mkString("_"), "_")
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.group.v0.models.GroupVersion] = {
      SqlParser.str(mappings.id) ~
      SqlParser.get[_root_.org.joda.time.DateTime](mappings.timestamp) ~
      io.flow.common.v0.anorm.parsers.ChangeType.parser(io.flow.common.v0.anorm.parsers.ChangeType.Mappings(mappings.`type`)) ~
      io.flow.group.v0.anorm.parsers.Group.parser(mappings.group) map {
        case id ~ timestamp ~ typeInstance ~ group => {
          io.flow.group.v0.models.GroupVersion(
            id = id,
            timestamp = timestamp,
            `type` = typeInstance,
            group = group
          )
        }
      }
    }

  }

  object Membership {

    case class Mappings(
      id: String = "id",
      group: io.flow.group.v0.anorm.parsers.Group.Mappings,
      user: String = "user"
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        id = s"${prefix}${sep}id",
        group = io.flow.group.v0.anorm.parsers.Group.Mappings.prefix(Seq(prefix, "group").filter(!_.isEmpty).mkString("_"), "_"),
        user = s"${prefix}${sep}user"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.group.v0.models.Membership] = {
      SqlParser.str(mappings.id) ~
      io.flow.group.v0.anorm.parsers.Group.parser(mappings.group) ~
      SqlParser.get[io.flow.group.v0.models.ExpandableUser](mappings.user) map {
        case id ~ group ~ user => {
          io.flow.group.v0.models.Membership(
            id = id,
            group = group,
            user = user
          )
        }
      }
    }

  }

  object MembershipVersion {

    case class Mappings(
      id: String = "id",
      timestamp: String = "timestamp",
      `type`: String = "type",
      membership: io.flow.group.v0.anorm.parsers.Membership.Mappings
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        id = s"${prefix}${sep}id",
        timestamp = s"${prefix}${sep}timestamp",
        `type` = s"${prefix}${sep}type",
        membership = io.flow.group.v0.anorm.parsers.Membership.Mappings.prefix(Seq(prefix, "membership").filter(!_.isEmpty).mkString("_"), "_")
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.group.v0.models.MembershipVersion] = {
      SqlParser.str(mappings.id) ~
      SqlParser.get[_root_.org.joda.time.DateTime](mappings.timestamp) ~
      io.flow.common.v0.anorm.parsers.ChangeType.parser(io.flow.common.v0.anorm.parsers.ChangeType.Mappings(mappings.`type`)) ~
      io.flow.group.v0.anorm.parsers.Membership.parser(mappings.membership) map {
        case id ~ timestamp ~ typeInstance ~ membership => {
          io.flow.group.v0.models.MembershipVersion(
            id = id,
            timestamp = timestamp,
            `type` = typeInstance,
            membership = membership
          )
        }
      }
    }

  }

  object User {

    case class Mappings(
      id: String = "id",
      email: String = "email"
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        id = s"${prefix}${sep}id",
        email = s"${prefix}${sep}email"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.group.v0.models.User] = {
      SqlParser.str(mappings.id) ~
      SqlParser.str(mappings.email).? map {
        case id ~ email => {
          io.flow.group.v0.models.User(
            id = id,
            email = email
          )
        }
      }
    }

  }

  object UserReference {

    case class Mappings(
      id: String = "id"
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        id = s"${prefix}${sep}id"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.group.v0.models.UserReference] = {
      SqlParser.str(mappings.id) map {
        case id => {
          io.flow.group.v0.models.UserReference(
            id = id
          )
        }
      }
    }

  }

}