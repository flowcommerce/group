/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.1
 * apidoc:0.11.6 http://www.apidoc.me/flow/group/0.0.1/play_2_4_client
 */
package io.flow.group.v0.models {

  sealed trait ExpandableUser

  case class Group(
    id: String,
    name: String
  )

  case class GroupVersion(
    id: String,
    timestamp: _root_.org.joda.time.DateTime,
    `type`: io.flow.common.v0.models.ChangeType,
    group: io.flow.group.v0.models.Group
  )

  case class Membership(
    id: String,
    group: io.flow.group.v0.models.Group,
    user: io.flow.group.v0.models.ExpandableUser
  )

  case class MembershipVersion(
    id: String,
    timestamp: _root_.org.joda.time.DateTime,
    `type`: io.flow.common.v0.models.ChangeType,
    membership: io.flow.group.v0.models.Membership
  )

  case class User(
    id: String,
    email: _root_.scala.Option[String] = None,
    name: io.flow.common.v0.models.Name
  ) extends ExpandableUser

  case class UserReference(
    id: String
  ) extends ExpandableUser

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union ExpandableUser, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   */
  case class ExpandableUserUndefinedType(
    description: String
  ) extends ExpandableUser

}

package io.flow.group.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.common.v0.models.json._
    import io.flow.group.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit def jsonReadsGroupGroup: play.api.libs.json.Reads[Group] = {
      (
        (__ \ "id").read[String] and
        (__ \ "name").read[String]
      )(Group.apply _)
    }

    def jsObjectGroup(obj: io.flow.group.v0.models.Group) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "name" -> play.api.libs.json.JsString(obj.name)
      )
    }

    implicit def jsonWritesGroupGroup: play.api.libs.json.Writes[Group] = {
      new play.api.libs.json.Writes[io.flow.group.v0.models.Group] {
        def writes(obj: io.flow.group.v0.models.Group) = {
          jsObjectGroup(obj)
        }
      }
    }

    implicit def jsonReadsGroupGroupVersion: play.api.libs.json.Reads[GroupVersion] = {
      (
        (__ \ "id").read[String] and
        (__ \ "timestamp").read[_root_.org.joda.time.DateTime] and
        (__ \ "type").read[io.flow.common.v0.models.ChangeType] and
        (__ \ "group").read[io.flow.group.v0.models.Group]
      )(GroupVersion.apply _)
    }

    def jsObjectGroupVersion(obj: io.flow.group.v0.models.GroupVersion) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "group" -> jsObjectGroup(obj.group)
      )
    }

    implicit def jsonWritesGroupGroupVersion: play.api.libs.json.Writes[GroupVersion] = {
      new play.api.libs.json.Writes[io.flow.group.v0.models.GroupVersion] {
        def writes(obj: io.flow.group.v0.models.GroupVersion) = {
          jsObjectGroupVersion(obj)
        }
      }
    }

    implicit def jsonReadsGroupMembership: play.api.libs.json.Reads[Membership] = {
      (
        (__ \ "id").read[String] and
        (__ \ "group").read[io.flow.group.v0.models.Group] and
        (__ \ "user").read[io.flow.group.v0.models.ExpandableUser]
      )(Membership.apply _)
    }

    def jsObjectMembership(obj: io.flow.group.v0.models.Membership) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "group" -> jsObjectGroup(obj.group),
        "user" -> jsObjectExpandableUser(obj.user)
      )
    }

    implicit def jsonWritesGroupMembership: play.api.libs.json.Writes[Membership] = {
      new play.api.libs.json.Writes[io.flow.group.v0.models.Membership] {
        def writes(obj: io.flow.group.v0.models.Membership) = {
          jsObjectMembership(obj)
        }
      }
    }

    implicit def jsonReadsGroupMembershipVersion: play.api.libs.json.Reads[MembershipVersion] = {
      (
        (__ \ "id").read[String] and
        (__ \ "timestamp").read[_root_.org.joda.time.DateTime] and
        (__ \ "type").read[io.flow.common.v0.models.ChangeType] and
        (__ \ "membership").read[io.flow.group.v0.models.Membership]
      )(MembershipVersion.apply _)
    }

    def jsObjectMembershipVersion(obj: io.flow.group.v0.models.MembershipVersion) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "membership" -> jsObjectMembership(obj.membership)
      )
    }

    implicit def jsonWritesGroupMembershipVersion: play.api.libs.json.Writes[MembershipVersion] = {
      new play.api.libs.json.Writes[io.flow.group.v0.models.MembershipVersion] {
        def writes(obj: io.flow.group.v0.models.MembershipVersion) = {
          jsObjectMembershipVersion(obj)
        }
      }
    }

    implicit def jsonReadsGroupUser: play.api.libs.json.Reads[User] = {
      (
        (__ \ "id").read[String] and
        (__ \ "email").readNullable[String] and
        (__ \ "name").read[io.flow.common.v0.models.Name]
      )(User.apply _)
    }

    def jsObjectUser(obj: io.flow.group.v0.models.User) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "name" -> io.flow.common.v0.models.json.jsObjectName(obj.name)
      ) ++ (obj.email match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("email" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonReadsGroupUserReference: play.api.libs.json.Reads[UserReference] = {
      (__ \ "id").read[String].map { x => new UserReference(id = x) }
    }

    def jsObjectUserReference(obj: io.flow.group.v0.models.UserReference) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id)
      )
    }

    implicit def jsonReadsGroupExpandableUser: play.api.libs.json.Reads[ExpandableUser] = new play.api.libs.json.Reads[ExpandableUser] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[ExpandableUser] = {
        (js \ "discriminator").validate[String] match {
          case play.api.libs.json.JsError(msg) => play.api.libs.json.JsError(msg)
          case play.api.libs.json.JsSuccess(discriminator, _) => {
            discriminator match {
              case "user_reference" => js.validate[io.flow.group.v0.models.UserReference]
              case "user" => js.validate[io.flow.group.v0.models.User]
              case other => play.api.libs.json.JsSuccess(io.flow.group.v0.models.ExpandableUserUndefinedType(other))
            }
          }
        }
      }
    }

    def jsObjectExpandableUser(obj: io.flow.group.v0.models.ExpandableUser) = {
      obj match {
        case x: io.flow.group.v0.models.UserReference => jsObjectUserReference(x) ++ play.api.libs.json.Json.obj("discriminator" -> "user_reference")
        case x: io.flow.group.v0.models.User => jsObjectUser(x) ++ play.api.libs.json.Json.obj("discriminator" -> "user")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesGroupExpandableUser: play.api.libs.json.Writes[ExpandableUser] = {
      new play.api.libs.json.Writes[io.flow.group.v0.models.ExpandableUser] {
        def writes(obj: io.flow.group.v0.models.ExpandableUser) = {
          jsObjectExpandableUser(obj)
        }
      }
    }
  }
}

package io.flow.group.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import io.flow.group.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )



  }

}


package io.flow.group.v0 {

  object Constants {

    val Namespace = "io.flow.group.v0"
    val UserAgent = "apidoc:0.11.6 http://www.apidoc.me/flow/group/0.0.1/play_2_4_client"
    val Version = "0.0.1"
    val VersionMajor = 0

  }

  class Client(
    apiUrl: String,
    auth: scala.Option[io.flow.group.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.flow.common.v0.models.json._
    import io.flow.group.v0.models.json._

    private[this] val logger = play.api.Logger("io.flow.group.v0.Client")

    logger.info(s"Initializing io.flow.group.v0.Client for url $apiUrl")

    def groups: Groups = Groups

    def healthchecks: Healthchecks = Healthchecks

    def memberships: Memberships = Memberships

    object Groups extends Groups {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "lower(name)"
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.group.v0.models.Group]] = {
        val queryParameters = Seq(
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/groups", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.io.flow.group.v0.Client.parseJson("Seq[io.flow.group.v0.models.Group]", r, _.validate[Seq[io.flow.group.v0.models.Group]])
          case r if r.status == 401 => throw new io.flow.group.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.group.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getVersions(
        id: _root_.scala.Option[Seq[String]] = None,
        groupId: _root_.scala.Option[Seq[String]] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "created_at"
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.group.v0.models.GroupVersion]] = {
        val queryParameters = Seq(
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _) ++
          groupId.getOrElse(Nil).map("group_id" -> _)

        _executeRequest("GET", s"/groups/versions", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.io.flow.group.v0.Client.parseJson("Seq[io.flow.group.v0.models.GroupVersion]", r, _.validate[Seq[io.flow.group.v0.models.GroupVersion]])
          case r if r.status == 401 => throw new io.flow.group.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.group.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }
    }

    object Healthchecks extends Healthchecks {
      override def getHealthcheck()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.Healthcheck] = {
        _executeRequest("GET", s"/_internal_/healthcheck").map {
          case r if r.status == 200 => _root_.io.flow.group.v0.Client.parseJson("io.flow.common.v0.models.Healthcheck", r, _.validate[io.flow.common.v0.models.Healthcheck])
          case r => throw new io.flow.group.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Memberships extends Memberships {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "-created_at",
        expand: _root_.scala.Option[Seq[String]] = None
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.group.v0.models.Membership]] = {
        val queryParameters = Seq(
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _) ++
          expand.getOrElse(Nil).map("expand" -> _)

        _executeRequest("GET", s"/memberships", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.io.flow.group.v0.Client.parseJson("Seq[io.flow.group.v0.models.Membership]", r, _.validate[Seq[io.flow.group.v0.models.Membership]])
          case r if r.status == 401 => throw new io.flow.group.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.group.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getVersions(
        id: _root_.scala.Option[Seq[String]] = None,
        membershipId: _root_.scala.Option[Seq[String]] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "created_at"
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.group.v0.models.MembershipVersion]] = {
        val queryParameters = Seq(
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _) ++
          membershipId.getOrElse(Nil).map("membership_id" -> _)

        _executeRequest("GET", s"/memberships/versions", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.io.flow.group.v0.Client.parseJson("Seq[io.flow.group.v0.models.MembershipVersion]", r, _.validate[Seq[io.flow.group.v0.models.MembershipVersion]])
          case r if r.status == 401 => throw new io.flow.group.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.group.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(apiUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Seq.empty,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new io.flow.group.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def groups: io.flow.group.v0.Groups
      def healthchecks: io.flow.group.v0.Healthchecks
      def memberships: io.flow.group.v0.Memberships
    }

  }

  trait Groups {
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "lower(name)"
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.group.v0.models.Group]]

    def getVersions(
      id: _root_.scala.Option[Seq[String]] = None,
      groupId: _root_.scala.Option[Seq[String]] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "created_at"
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.group.v0.models.GroupVersion]]
  }

  trait Healthchecks {
    def getHealthcheck()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.Healthcheck]
  }

  trait Memberships {
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "-created_at",
      expand: _root_.scala.Option[Seq[String]] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.group.v0.models.Membership]]

    def getVersions(
      id: _root_.scala.Option[Seq[String]] = None,
      membershipId: _root_.scala.Option[Seq[String]] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "created_at"
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.group.v0.models.MembershipVersion]]
  }

  package errors {

    import io.flow.common.v0.models.json._
    import io.flow.group.v0.models.json._

    case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends Exception(s"HTTP $responseCode: $message")

  }

}